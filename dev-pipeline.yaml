apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipeline.openshift.io/started-by: opentlc-mgr
  resourceVersion: '1586224'
  name: dev-pipeline-omm7un
  uid: b1a3ff5f-76f7-4690-b014-b07db301ed69
  creationTimestamp: '2022-02-24T13:37:34Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:pipeline.openshift.io/started-by': {}
          'f:labels':
            .: {}
            'f:tekton.dev/pipeline': {}
        'f:spec':
          .: {}
          'f:params': {}
          'f:pipelineRef':
            .: {}
            'f:name': {}
          'f:resources': {}
          'f:status': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2022-02-24T13:37:34Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          .: {}
          'f:completionTime': {}
          'f:conditions': {}
          'f:pipelineSpec':
            .: {}
            'f:params': {}
            'f:tasks': {}
            'f:workspaces': {}
          'f:startTime': {}
          'f:taskRuns':
            .: {}
            'f:dev-pipeline-omm7un-build-ckbl8':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:description': {}
                  'f:params': {}
                  'f:steps': {}
                  'f:workspaces': {}
            'f:dev-pipeline-omm7un-deploy-sqzr2':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:description': {}
                  'f:params': {}
                  'f:steps': {}
                  'f:workspaces': {}
            'f:dev-pipeline-omm7un-exposeservice-swnht':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:description': {}
                  'f:params': {}
                  'f:steps': {}
                  'f:workspaces': {}
            'f:dev-pipeline-omm7un-git-clone-2846q':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskResults': {}
                'f:taskSpec':
                  .: {}
                  'f:description': {}
                  'f:params': {}
                  'f:results': {}
                  'f:steps': {}
                  'f:workspaces': {}
            'f:dev-pipeline-omm7un-startbuild-6sqkj':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:description': {}
                  'f:params': {}
                  'f:steps': {}
                  'f:workspaces': {}
      manager: openshift-pipelines-controller
      operation: Update
      subresource: status
      time: '2022-02-24T13:40:28Z'
  namespace: pipeline
  labels:
    tekton.dev/pipeline: dev-pipeline
spec:
  params:
    - name: namespace
      value: dev
    - name: app-name
      value: python-rest-service
    - name: app-file
      value: ws.py
  pipelineRef:
    name: dev-pipeline
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: pvc-aeaff0655c
status:
  completionTime: '2022-02-24T13:40:28Z'
  conditions:
    - lastTransitionTime: '2022-02-24T13:40:28Z'
      message: 'Tasks Completed: 5 (Failed: 0, Cancelled 0), Skipped: 0'
      reason: Succeeded
      status: 'True'
      type: Succeeded
  pipelineSpec:
    params:
      - default: dev
        name: namespace
        type: string
      - default: python-rest-service
        name: app-name
        type: string
      - default: ws.py
        name: app-file
        type: string
    tasks:
      - name: git-clone
        params:
          - name: url
            value: 'https://github.com/likhia/python-rest-service.git'
          - name: revision
            value: main
          - name: submodules
            value: 'true'
          - name: depth
            value: '1'
          - name: sslVerify
            value: 'true'
          - name: deleteExisting
            value: 'true'
          - name: verbose
            value: 'true'
          - name: gitInitImage
            value: >-
              registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:af7dd5b3b1598a980f17d5f5d3d8a4b11ab4f5184677f7f17ad302baa36bd3c1
          - name: userHome
            value: /tekton/home
        taskRef:
          kind: ClusterTask
          name: git-clone
        workspaces:
          - name: output
            workspace: source
      - name: build
        params:
          - name: SCRIPT
            value: >-
              oc new-build  --name=$(params.app-name)  --binary
              --image-stream=python:latest -e APP_FILE=$(params.app-file) -n
              $(params.namespace)
          - name: VERSION
            value: latest
        runAfter:
          - git-clone
        taskRef:
          kind: ClusterTask
          name: openshift-client
        workspaces:
          - name: manifest-dir
            workspace: source
          - name: kubeconfig-dir
            workspace: source
      - name: startbuild
        params:
          - name: SCRIPT
            value: >-
              oc start-build $(params.app-name) -n $(params.namespace) 
              --from-dir=.  --follow
          - name: VERSION
            value: latest
        runAfter:
          - build
        taskRef:
          kind: ClusterTask
          name: openshift-client
        workspaces:
          - name: manifest-dir
            workspace: source
          - name: kubeconfig-dir
            workspace: source
      - name: deploy
        params:
          - name: SCRIPT
            value: >-
              oc new-app $(params.app-name):latest -e
              APP_FILE=$(params.app-file) -n $(params.namespace)
          - name: VERSION
            value: latest
        runAfter:
          - startbuild
        taskRef:
          kind: ClusterTask
          name: openshift-client
        workspaces:
          - name: manifest-dir
            workspace: source
          - name: kubeconfig-dir
            workspace: source
      - name: exposeservice
        params:
          - name: SCRIPT
            value: oc expose service/$(params.app-name) -n $(params.namespace)
          - name: VERSION
            value: latest
        runAfter:
          - deploy
        taskRef:
          kind: ClusterTask
          name: openshift-client
        workspaces:
          - name: manifest-dir
            workspace: source
          - name: kubeconfig-dir
            workspace: source
    workspaces:
      - name: source
  startTime: '2022-02-24T13:37:34Z'
  taskRuns:
    dev-pipeline-omm7un-build-ckbl8:
      pipelineTaskName: build
      status:
        completionTime: '2022-02-24T13:38:08Z'
        conditions:
          - lastTransitionTime: '2022-02-24T13:38:08Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: dev-pipeline-omm7un-build-ckbl8-pod-wgrrz
        startTime: '2022-02-24T13:37:58Z'
        steps:
          - container: step-oc
            imageID: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli@sha256:8c1a479c687d9f52bc311873f66235a4cd152264c9c5060200729bf24793581a
            name: oc
            terminated:
              containerID: >-
                cri-o://2d37da8c4847162a69b1fdaeddeece3f08ce012865031c22dca24f79ec2d8ff5
              exitCode: 0
              finishedAt: '2022-02-24T13:38:07Z'
              reason: Completed
              startedAt: '2022-02-24T13:38:06Z'
        taskSpec:
          description: >-
            This task runs commands against the cluster provided by user and if
            not provided then where the Task is being executed.

            OpenShift is a Kubernetes distribution from Red Hat which provides
            oc, the OpenShift CLI that complements kubectl for simplifying
            deployment and configuration applications on OpenShift.
          params:
            - default: oc help
              description: The OpenShift CLI arguments to run
              name: SCRIPT
              type: string
            - default: latest
              description: The OpenShift Version to use
              name: VERSION
              type: string
          steps:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
              name: oc
              resources: {}
              script: |
                #!/usr/bin/env bash

                [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
                cd $(workspaces.manifest-dir.path)

                [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
                [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
                export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

                $(params.SCRIPT)
          workspaces:
            - description: >-
                The workspace which contains kubernetes manifests which we want
                to apply on the cluster.
              name: manifest-dir
              optional: true
            - description: >-
                The workspace which contains the the kubeconfig file if in case
                we want to run the oc command on another cluster.
              name: kubeconfig-dir
              optional: true
    dev-pipeline-omm7un-deploy-sqzr2:
      pipelineTaskName: deploy
      status:
        completionTime: '2022-02-24T13:40:19Z'
        conditions:
          - lastTransitionTime: '2022-02-24T13:40:19Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: dev-pipeline-omm7un-deploy-sqzr2-pod-6nxht
        startTime: '2022-02-24T13:40:10Z'
        steps:
          - container: step-oc
            imageID: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli@sha256:8c1a479c687d9f52bc311873f66235a4cd152264c9c5060200729bf24793581a
            name: oc
            terminated:
              containerID: >-
                cri-o://42493ca28f31e84f2b4a892dc70763746f3249dc04e2a81ad2028413a436696c
              exitCode: 0
              finishedAt: '2022-02-24T13:40:18Z'
              reason: Completed
              startedAt: '2022-02-24T13:40:17Z'
        taskSpec:
          description: >-
            This task runs commands against the cluster provided by user and if
            not provided then where the Task is being executed.

            OpenShift is a Kubernetes distribution from Red Hat which provides
            oc, the OpenShift CLI that complements kubectl for simplifying
            deployment and configuration applications on OpenShift.
          params:
            - default: oc help
              description: The OpenShift CLI arguments to run
              name: SCRIPT
              type: string
            - default: latest
              description: The OpenShift Version to use
              name: VERSION
              type: string
          steps:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
              name: oc
              resources: {}
              script: |
                #!/usr/bin/env bash

                [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
                cd $(workspaces.manifest-dir.path)

                [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
                [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
                export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

                $(params.SCRIPT)
          workspaces:
            - description: >-
                The workspace which contains kubernetes manifests which we want
                to apply on the cluster.
              name: manifest-dir
              optional: true
            - description: >-
                The workspace which contains the the kubeconfig file if in case
                we want to run the oc command on another cluster.
              name: kubeconfig-dir
              optional: true
    dev-pipeline-omm7un-exposeservice-swnht:
      pipelineTaskName: exposeservice
      status:
        completionTime: '2022-02-24T13:40:28Z'
        conditions:
          - lastTransitionTime: '2022-02-24T13:40:28Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: dev-pipeline-omm7un-exposeservice-swnht-pod-5ts8v
        startTime: '2022-02-24T13:40:19Z'
        steps:
          - container: step-oc
            imageID: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli@sha256:8c1a479c687d9f52bc311873f66235a4cd152264c9c5060200729bf24793581a
            name: oc
            terminated:
              containerID: >-
                cri-o://c8ce6b2957f6e399ac19a1ae2946d9c3b5d616caa3e13e458ab3691f67e9cf34
              exitCode: 0
              finishedAt: '2022-02-24T13:40:27Z'
              reason: Completed
              startedAt: '2022-02-24T13:40:26Z'
        taskSpec:
          description: >-
            This task runs commands against the cluster provided by user and if
            not provided then where the Task is being executed.

            OpenShift is a Kubernetes distribution from Red Hat which provides
            oc, the OpenShift CLI that complements kubectl for simplifying
            deployment and configuration applications on OpenShift.
          params:
            - default: oc help
              description: The OpenShift CLI arguments to run
              name: SCRIPT
              type: string
            - default: latest
              description: The OpenShift Version to use
              name: VERSION
              type: string
          steps:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
              name: oc
              resources: {}
              script: |
                #!/usr/bin/env bash

                [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
                cd $(workspaces.manifest-dir.path)

                [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
                [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
                export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

                $(params.SCRIPT)
          workspaces:
            - description: >-
                The workspace which contains kubernetes manifests which we want
                to apply on the cluster.
              name: manifest-dir
              optional: true
            - description: >-
                The workspace which contains the the kubeconfig file if in case
                we want to run the oc command on another cluster.
              name: kubeconfig-dir
              optional: true
    dev-pipeline-omm7un-git-clone-2846q:
      pipelineTaskName: git-clone
      status:
        completionTime: '2022-02-24T13:37:58Z'
        conditions:
          - lastTransitionTime: '2022-02-24T13:37:58Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: dev-pipeline-omm7un-git-clone-2846q-pod-2dt7q
        startTime: '2022-02-24T13:37:34Z'
        steps:
          - container: step-clone
            imageID: >-
              registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:af7dd5b3b1598a980f17d5f5d3d8a4b11ab4f5184677f7f17ad302baa36bd3c1
            name: clone
            terminated:
              containerID: >-
                cri-o://d53b705972b3637de3d2467abb7b95a81fa84727ea8a61037773adc391118c09
              exitCode: 0
              finishedAt: '2022-02-24T13:37:58Z'
              message: >-
                [{"key":"commit","value":"e8cc3089befb5ced4f2ab764f8f8f51b2af7c531","type":1},{"key":"url","value":"https://github.com/likhia/python-rest-service.git","type":1}]
              reason: Completed
              startedAt: '2022-02-24T13:37:57Z'
        taskResults:
          - name: commit
            value: e8cc3089befb5ced4f2ab764f8f8f51b2af7c531
          - name: url
            value: 'https://github.com/likhia/python-rest-service.git'
        taskSpec:
          description: >-
            These Tasks are Git tasks to work with repositories used by other
            tasks in your Pipeline.

            The git-clone Task will clone a repo from the provided url into the
            output Workspace. By default the repo will be cloned into the root
            of your Workspace. You can clone into a subdirectory by setting this
            Task's subdirectory param. This Task also supports sparse checkouts.
            To perform a sparse checkout, pass a list of comma separated
            directory patterns to this Task's sparseCheckoutDirectories param.
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ''
              description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
              name: revision
              type: string
            - default: ''
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: 'true'
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: '1'
              description: >-
                Perform a shallow clone, fetching only the most recent N
                commits.
              name: depth
              type: string
            - default: 'true'
              description: >-
                Set the `http.sslVerify` global git config. Setting this to
                `false` is not advised unless you are sure that you trust your
                git remote.
              name: sslVerify
              type: string
            - default: ''
              description: >-
                Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ''
              description: >-
                Define the directory patterns to match or exclude when
                performing a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: 'true'
              description: >-
                Clean out the contents of the destination directory if it
                already exists before cloning.
              name: deleteExisting
              type: string
            - default: ''
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ''
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ''
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: 'true'
              description: >-
                Log the commands that are executed during `git-clone`'s
                operation.
              name: verbose
              type: string
            - default: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:af7dd5b3b1598a980f17d5f5d3d8a4b11ab4f5184677f7f17ad302baa36bd3c1
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: >
                Absolute path to the user's home directory. Set this explicitly
                if you are running the image as a non-root user or have
                overridden

                the gitInitImage param with an image containing custom user
                configuration.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
            - description: The precise URL that was fetched by this Task.
              name: url
          steps:
            - env:
                - name: HOME
                  value: $(params.userHome)
                - name: PARAM_URL
                  value: $(params.url)
                - name: PARAM_REVISION
                  value: $(params.revision)
                - name: PARAM_REFSPEC
                  value: $(params.refspec)
                - name: PARAM_SUBMODULES
                  value: $(params.submodules)
                - name: PARAM_DEPTH
                  value: $(params.depth)
                - name: PARAM_SSL_VERIFY
                  value: $(params.sslVerify)
                - name: PARAM_SUBDIRECTORY
                  value: $(params.subdirectory)
                - name: PARAM_DELETE_EXISTING
                  value: $(params.deleteExisting)
                - name: PARAM_HTTP_PROXY
                  value: $(params.httpProxy)
                - name: PARAM_HTTPS_PROXY
                  value: $(params.httpsProxy)
                - name: PARAM_NO_PROXY
                  value: $(params.noProxy)
                - name: PARAM_VERBOSE
                  value: $(params.verbose)
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  value: $(params.sparseCheckoutDirectories)
                - name: PARAM_USER_HOME
                  value: $(params.userHome)
                - name: WORKSPACE_OUTPUT_PATH
                  value: $(workspaces.output.path)
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: $(workspaces.ssh-directory.bound)
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                  value: $(workspaces.ssh-directory.path)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: $(workspaces.basic-auth.bound)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  value: $(workspaces.basic-auth.path)
              image: $(params.gitInitImage)
              name: clone
              resources: {}
              script: >
                #!/usr/bin/env sh

                set -eu


                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi


                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi


                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi


                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }


                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi


                test -z "${PARAM_HTTP_PROXY}" || export
                HTTP_PROXY="${PARAM_HTTP_PROXY}"

                test -z "${PARAM_HTTPS_PROXY}" || export
                HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

                test -z "${PARAM_NO_PROXY}" || export
                NO_PROXY="${PARAM_NO_PROXY}"


                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"

                RESULT_SHA="$(git rev-parse HEAD)"

                EXIT_CODE="$?"

                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi

                printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"

                printf "%s" "${PARAM_URL}" > "$(results.url.path)"
          workspaces:
            - description: >-
                The git repo will be cloned onto the volume backing this
                Workspace.
              name: output
            - description: >
                A .ssh directory with private key, known_hosts, config, etc.
                Copied to

                the user's home before git commands are executed. Used to
                authenticate

                with the git remote when performing the clone. Binding a Secret
                to this

                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: >
                A Workspace containing a .gitconfig and .git-credentials file.
                These

                will be copied to the user's home before any git commands are
                run. Any

                other files in this Workspace are ignored. It is strongly
                recommended

                to use ssh-directory over basic-auth whenever possible and to
                bind a

                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
    dev-pipeline-omm7un-startbuild-6sqkj:
      pipelineTaskName: startbuild
      status:
        completionTime: '2022-02-24T13:40:10Z'
        conditions:
          - lastTransitionTime: '2022-02-24T13:40:10Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: dev-pipeline-omm7un-startbuild-6sqkj-pod-7gzh5
        startTime: '2022-02-24T13:38:08Z'
        steps:
          - container: step-oc
            imageID: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli@sha256:8c1a479c687d9f52bc311873f66235a4cd152264c9c5060200729bf24793581a
            name: oc
            terminated:
              containerID: >-
                cri-o://1d5117f197a05c3d07a714a6eeb6cf67c2c349800a09dc4c1511e6430aa5dde9
              exitCode: 0
              finishedAt: '2022-02-24T13:40:09Z'
              reason: Completed
              startedAt: '2022-02-24T13:38:15Z'
        taskSpec:
          description: >-
            This task runs commands against the cluster provided by user and if
            not provided then where the Task is being executed.

            OpenShift is a Kubernetes distribution from Red Hat which provides
            oc, the OpenShift CLI that complements kubectl for simplifying
            deployment and configuration applications on OpenShift.
          params:
            - default: oc help
              description: The OpenShift CLI arguments to run
              name: SCRIPT
              type: string
            - default: latest
              description: The OpenShift Version to use
              name: VERSION
              type: string
          steps:
            - image: >-
                image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
              name: oc
              resources: {}
              script: |
                #!/usr/bin/env bash

                [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
                cd $(workspaces.manifest-dir.path)

                [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
                [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
                export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

                $(params.SCRIPT)
          workspaces:
            - description: >-
                The workspace which contains kubernetes manifests which we want
                to apply on the cluster.
              name: manifest-dir
              optional: true
            - description: >-
                The workspace which contains the the kubeconfig file if in case
                we want to run the oc command on another cluster.
              name: kubeconfig-dir
              optional: true
